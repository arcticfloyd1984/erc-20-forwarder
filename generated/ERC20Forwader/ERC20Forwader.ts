// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BaseGasChanged extends ethereum.Event {
  get params(): BaseGasChanged__Params {
    return new BaseGasChanged__Params(this);
  }
}

export class BaseGasChanged__Params {
  _event: BaseGasChanged;

  constructor(event: BaseGasChanged) {
    this._event = event;
  }

  get newBaseGas(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get actor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FeeCharged extends ethereum.Event {
  get params(): FeeCharged__Params {
    return new FeeCharged__Params(this);
  }
}

export class FeeCharged__Params {
  _event: FeeCharged;

  constructor(event: FeeCharged) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get charge(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class GasRefundChanged extends ethereum.Event {
  get params(): GasRefundChanged__Params {
    return new GasRefundChanged__Params(this);
  }
}

export class GasRefundChanged__Params {
  _event: GasRefundChanged;

  constructor(event: GasRefundChanged) {
    this._event = event;
  }

  get newGasRefund(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get actor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class GasTokenForwarderBaseGasChanged extends ethereum.Event {
  get params(): GasTokenForwarderBaseGasChanged__Params {
    return new GasTokenForwarderBaseGasChanged__Params(this);
  }
}

export class GasTokenForwarderBaseGasChanged__Params {
  _event: GasTokenForwarderBaseGasChanged;

  constructor(event: GasTokenForwarderBaseGasChanged) {
    this._event = event;
  }

  get newGasTokenForwarderBaseGas(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get actor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OracleAggregatorChanged extends ethereum.Event {
  get params(): OracleAggregatorChanged__Params {
    return new OracleAggregatorChanged__Params(this);
  }
}

export class OracleAggregatorChanged__Params {
  _event: OracleAggregatorChanged;

  constructor(event: OracleAggregatorChanged) {
    this._event = event;
  }

  get newOracleAggregatorAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get actor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferHandlerGasChanged extends ethereum.Event {
  get params(): TransferHandlerGasChanged__Params {
    return new TransferHandlerGasChanged__Params(this);
  }
}

export class TransferHandlerGasChanged__Params {
  _event: TransferHandlerGasChanged;

  constructor(event: TransferHandlerGasChanged) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get actor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newGas(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TrustedForwarderChanged extends ethereum.Event {
  get params(): TrustedForwarderChanged__Params {
    return new TrustedForwarderChanged__Params(this);
  }
}

export class TrustedForwarderChanged__Params {
  _event: TrustedForwarderChanged;

  constructor(event: TrustedForwarderChanged) {
    this._event = event;
  }

  get newForwarderAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get actor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ERC20Forwader__executeEIP712Result {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class ERC20Forwader__executeEIP712InputReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class ERC20Forwader__executeEIP712WithGasTokensResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class ERC20Forwader__executeEIP712WithGasTokensInputReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class ERC20Forwader__executePersonalSignResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class ERC20Forwader__executePersonalSignInputReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class ERC20Forwader__executePersonalSignWithGasTokensResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class ERC20Forwader__executePersonalSignWithGasTokensInputReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class ERC20Forwader__permitAndExecuteEIP712Result {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class ERC20Forwader__permitAndExecuteEIP712InputReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class ERC20Forwader__permitAndExecuteEIP712InputPermitOptionsStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get spender(): Address {
    return this[1].toAddress();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get expiry(): BigInt {
    return this[4].toBigInt();
  }

  get allowed(): boolean {
    return this[5].toBoolean();
  }

  get v(): i32 {
    return this[6].toI32();
  }

  get r(): Bytes {
    return this[7].toBytes();
  }

  get s(): Bytes {
    return this[8].toBytes();
  }
}

export class ERC20Forwader__permitAndExecuteEIP712WithGasTokensResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class ERC20Forwader__permitAndExecuteEIP712WithGasTokensInputReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class ERC20Forwader__permitAndExecuteEIP712WithGasTokensInputPermitOptionsStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get spender(): Address {
    return this[1].toAddress();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get expiry(): BigInt {
    return this[4].toBigInt();
  }

  get allowed(): boolean {
    return this[5].toBoolean();
  }

  get v(): i32 {
    return this[6].toI32();
  }

  get r(): Bytes {
    return this[7].toBytes();
  }

  get s(): Bytes {
    return this[8].toBytes();
  }
}

export class ERC20Forwader__permitEIP2612AndExecuteEIP712Result {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class ERC20Forwader__permitEIP2612AndExecuteEIP712InputReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class ERC20Forwader__permitEIP2612AndExecuteEIP712InputPermitOptionsStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get spender(): Address {
    return this[1].toAddress();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get expiry(): BigInt {
    return this[4].toBigInt();
  }

  get allowed(): boolean {
    return this[5].toBoolean();
  }

  get v(): i32 {
    return this[6].toI32();
  }

  get r(): Bytes {
    return this[7].toBytes();
  }

  get s(): Bytes {
    return this[8].toBytes();
  }
}

export class ERC20Forwader__permitEIP2612AndExecuteEIP712WithGasTokensResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class ERC20Forwader__permitEIP2612AndExecuteEIP712WithGasTokensInputReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class ERC20Forwader__permitEIP2612AndExecuteEIP712WithGasTokensInputPermitOptionsStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get spender(): Address {
    return this[1].toAddress();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get expiry(): BigInt {
    return this[4].toBigInt();
  }

  get allowed(): boolean {
    return this[5].toBoolean();
  }

  get v(): i32 {
    return this[6].toI32();
  }

  get r(): Bytes {
    return this[7].toBytes();
  }

  get s(): Bytes {
    return this[8].toBytes();
  }
}

export class ERC20Forwader extends ethereum.SmartContract {
  static bind(address: Address): ERC20Forwader {
    return new ERC20Forwader("ERC20Forwader", address);
  }

  baseGas(): BigInt {
    let result = super.call("baseGas", "baseGas():(uint128)", []);

    return result[0].toBigInt();
  }

  try_baseGas(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("baseGas", "baseGas():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  executeEIP712(
    req: ERC20Forwader__executeEIP712InputReqStruct,
    domainSeparator: Bytes,
    sig: Bytes
  ): ERC20Forwader__executeEIP712Result {
    let result = super.call(
      "executeEIP712",
      "executeEIP712((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes32,bytes):(bool,bytes)",
      [
        ethereum.Value.fromTuple(req),
        ethereum.Value.fromFixedBytes(domainSeparator),
        ethereum.Value.fromBytes(sig)
      ]
    );

    return new ERC20Forwader__executeEIP712Result(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_executeEIP712(
    req: ERC20Forwader__executeEIP712InputReqStruct,
    domainSeparator: Bytes,
    sig: Bytes
  ): ethereum.CallResult<ERC20Forwader__executeEIP712Result> {
    let result = super.tryCall(
      "executeEIP712",
      "executeEIP712((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes32,bytes):(bool,bytes)",
      [
        ethereum.Value.fromTuple(req),
        ethereum.Value.fromFixedBytes(domainSeparator),
        ethereum.Value.fromBytes(sig)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC20Forwader__executeEIP712Result(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  executeEIP712WithGasTokens(
    req: ERC20Forwader__executeEIP712WithGasTokensInputReqStruct,
    domainSeparator: Bytes,
    sig: Bytes,
    gasTokensBurned: BigInt
  ): ERC20Forwader__executeEIP712WithGasTokensResult {
    let result = super.call(
      "executeEIP712WithGasTokens",
      "executeEIP712WithGasTokens((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes32,bytes,uint256):(bool,bytes)",
      [
        ethereum.Value.fromTuple(req),
        ethereum.Value.fromFixedBytes(domainSeparator),
        ethereum.Value.fromBytes(sig),
        ethereum.Value.fromUnsignedBigInt(gasTokensBurned)
      ]
    );

    return new ERC20Forwader__executeEIP712WithGasTokensResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_executeEIP712WithGasTokens(
    req: ERC20Forwader__executeEIP712WithGasTokensInputReqStruct,
    domainSeparator: Bytes,
    sig: Bytes,
    gasTokensBurned: BigInt
  ): ethereum.CallResult<ERC20Forwader__executeEIP712WithGasTokensResult> {
    let result = super.tryCall(
      "executeEIP712WithGasTokens",
      "executeEIP712WithGasTokens((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes32,bytes,uint256):(bool,bytes)",
      [
        ethereum.Value.fromTuple(req),
        ethereum.Value.fromFixedBytes(domainSeparator),
        ethereum.Value.fromBytes(sig),
        ethereum.Value.fromUnsignedBigInt(gasTokensBurned)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC20Forwader__executeEIP712WithGasTokensResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  executePersonalSign(
    req: ERC20Forwader__executePersonalSignInputReqStruct,
    sig: Bytes
  ): ERC20Forwader__executePersonalSignResult {
    let result = super.call(
      "executePersonalSign",
      "executePersonalSign((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes):(bool,bytes)",
      [ethereum.Value.fromTuple(req), ethereum.Value.fromBytes(sig)]
    );

    return new ERC20Forwader__executePersonalSignResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_executePersonalSign(
    req: ERC20Forwader__executePersonalSignInputReqStruct,
    sig: Bytes
  ): ethereum.CallResult<ERC20Forwader__executePersonalSignResult> {
    let result = super.tryCall(
      "executePersonalSign",
      "executePersonalSign((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes):(bool,bytes)",
      [ethereum.Value.fromTuple(req), ethereum.Value.fromBytes(sig)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC20Forwader__executePersonalSignResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  executePersonalSignWithGasTokens(
    req: ERC20Forwader__executePersonalSignWithGasTokensInputReqStruct,
    sig: Bytes,
    gasTokensBurned: BigInt
  ): ERC20Forwader__executePersonalSignWithGasTokensResult {
    let result = super.call(
      "executePersonalSignWithGasTokens",
      "executePersonalSignWithGasTokens((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes,uint256):(bool,bytes)",
      [
        ethereum.Value.fromTuple(req),
        ethereum.Value.fromBytes(sig),
        ethereum.Value.fromUnsignedBigInt(gasTokensBurned)
      ]
    );

    return new ERC20Forwader__executePersonalSignWithGasTokensResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_executePersonalSignWithGasTokens(
    req: ERC20Forwader__executePersonalSignWithGasTokensInputReqStruct,
    sig: Bytes,
    gasTokensBurned: BigInt
  ): ethereum.CallResult<
    ERC20Forwader__executePersonalSignWithGasTokensResult
  > {
    let result = super.tryCall(
      "executePersonalSignWithGasTokens",
      "executePersonalSignWithGasTokens((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes,uint256):(bool,bytes)",
      [
        ethereum.Value.fromTuple(req),
        ethereum.Value.fromBytes(sig),
        ethereum.Value.fromUnsignedBigInt(gasTokensBurned)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC20Forwader__executePersonalSignWithGasTokensResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  feeManager(): Address {
    let result = super.call("feeManager", "feeManager():(address)", []);

    return result[0].toAddress();
  }

  try_feeManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeManager", "feeManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeReceiver(): Address {
    let result = super.call("feeReceiver", "feeReceiver():(address)", []);

    return result[0].toAddress();
  }

  try_feeReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeReceiver", "feeReceiver():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  forwarder(): Address {
    let result = super.call("forwarder", "forwarder():(address)", []);

    return result[0].toAddress();
  }

  try_forwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall("forwarder", "forwarder():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gasRefund(): BigInt {
    let result = super.call("gasRefund", "gasRefund():(uint128)", []);

    return result[0].toBigInt();
  }

  try_gasRefund(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gasRefund", "gasRefund():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gasTokenForwarderBaseGas(): BigInt {
    let result = super.call(
      "gasTokenForwarderBaseGas",
      "gasTokenForwarderBaseGas():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_gasTokenForwarderBaseGas(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gasTokenForwarderBaseGas",
      "gasTokenForwarderBaseGas():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNonce(from: Address, batchId: BigInt): BigInt {
    let result = super.call("getNonce", "getNonce(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(from),
      ethereum.Value.fromUnsignedBigInt(batchId)
    ]);

    return result[0].toBigInt();
  }

  try_getNonce(from: Address, batchId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNonce",
      "getNonce(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(batchId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  oracleAggregator(): Address {
    let result = super.call(
      "oracleAggregator",
      "oracleAggregator():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_oracleAggregator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oracleAggregator",
      "oracleAggregator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  permitAndExecuteEIP712(
    req: ERC20Forwader__permitAndExecuteEIP712InputReqStruct,
    domainSeparator: Bytes,
    sig: Bytes,
    permitOptions: ERC20Forwader__permitAndExecuteEIP712InputPermitOptionsStruct
  ): ERC20Forwader__permitAndExecuteEIP712Result {
    let result = super.call(
      "permitAndExecuteEIP712",
      "permitAndExecuteEIP712((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes32,bytes,(address,address,uint256,uint256,uint256,bool,uint8,bytes32,bytes32)):(bool,bytes)",
      [
        ethereum.Value.fromTuple(req),
        ethereum.Value.fromFixedBytes(domainSeparator),
        ethereum.Value.fromBytes(sig),
        ethereum.Value.fromTuple(permitOptions)
      ]
    );

    return new ERC20Forwader__permitAndExecuteEIP712Result(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_permitAndExecuteEIP712(
    req: ERC20Forwader__permitAndExecuteEIP712InputReqStruct,
    domainSeparator: Bytes,
    sig: Bytes,
    permitOptions: ERC20Forwader__permitAndExecuteEIP712InputPermitOptionsStruct
  ): ethereum.CallResult<ERC20Forwader__permitAndExecuteEIP712Result> {
    let result = super.tryCall(
      "permitAndExecuteEIP712",
      "permitAndExecuteEIP712((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes32,bytes,(address,address,uint256,uint256,uint256,bool,uint8,bytes32,bytes32)):(bool,bytes)",
      [
        ethereum.Value.fromTuple(req),
        ethereum.Value.fromFixedBytes(domainSeparator),
        ethereum.Value.fromBytes(sig),
        ethereum.Value.fromTuple(permitOptions)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC20Forwader__permitAndExecuteEIP712Result(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  permitAndExecuteEIP712WithGasTokens(
    req: ERC20Forwader__permitAndExecuteEIP712WithGasTokensInputReqStruct,
    domainSeparator: Bytes,
    sig: Bytes,
    permitOptions: ERC20Forwader__permitAndExecuteEIP712WithGasTokensInputPermitOptionsStruct,
    gasTokensBurned: BigInt
  ): ERC20Forwader__permitAndExecuteEIP712WithGasTokensResult {
    let result = super.call(
      "permitAndExecuteEIP712WithGasTokens",
      "permitAndExecuteEIP712WithGasTokens((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes32,bytes,(address,address,uint256,uint256,uint256,bool,uint8,bytes32,bytes32),uint256):(bool,bytes)",
      [
        ethereum.Value.fromTuple(req),
        ethereum.Value.fromFixedBytes(domainSeparator),
        ethereum.Value.fromBytes(sig),
        ethereum.Value.fromTuple(permitOptions),
        ethereum.Value.fromUnsignedBigInt(gasTokensBurned)
      ]
    );

    return new ERC20Forwader__permitAndExecuteEIP712WithGasTokensResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_permitAndExecuteEIP712WithGasTokens(
    req: ERC20Forwader__permitAndExecuteEIP712WithGasTokensInputReqStruct,
    domainSeparator: Bytes,
    sig: Bytes,
    permitOptions: ERC20Forwader__permitAndExecuteEIP712WithGasTokensInputPermitOptionsStruct,
    gasTokensBurned: BigInt
  ): ethereum.CallResult<
    ERC20Forwader__permitAndExecuteEIP712WithGasTokensResult
  > {
    let result = super.tryCall(
      "permitAndExecuteEIP712WithGasTokens",
      "permitAndExecuteEIP712WithGasTokens((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes32,bytes,(address,address,uint256,uint256,uint256,bool,uint8,bytes32,bytes32),uint256):(bool,bytes)",
      [
        ethereum.Value.fromTuple(req),
        ethereum.Value.fromFixedBytes(domainSeparator),
        ethereum.Value.fromBytes(sig),
        ethereum.Value.fromTuple(permitOptions),
        ethereum.Value.fromUnsignedBigInt(gasTokensBurned)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC20Forwader__permitAndExecuteEIP712WithGasTokensResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  permitEIP2612AndExecuteEIP712(
    req: ERC20Forwader__permitEIP2612AndExecuteEIP712InputReqStruct,
    domainSeparator: Bytes,
    sig: Bytes,
    permitOptions: ERC20Forwader__permitEIP2612AndExecuteEIP712InputPermitOptionsStruct
  ): ERC20Forwader__permitEIP2612AndExecuteEIP712Result {
    let result = super.call(
      "permitEIP2612AndExecuteEIP712",
      "permitEIP2612AndExecuteEIP712((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes32,bytes,(address,address,uint256,uint256,uint256,bool,uint8,bytes32,bytes32)):(bool,bytes)",
      [
        ethereum.Value.fromTuple(req),
        ethereum.Value.fromFixedBytes(domainSeparator),
        ethereum.Value.fromBytes(sig),
        ethereum.Value.fromTuple(permitOptions)
      ]
    );

    return new ERC20Forwader__permitEIP2612AndExecuteEIP712Result(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_permitEIP2612AndExecuteEIP712(
    req: ERC20Forwader__permitEIP2612AndExecuteEIP712InputReqStruct,
    domainSeparator: Bytes,
    sig: Bytes,
    permitOptions: ERC20Forwader__permitEIP2612AndExecuteEIP712InputPermitOptionsStruct
  ): ethereum.CallResult<ERC20Forwader__permitEIP2612AndExecuteEIP712Result> {
    let result = super.tryCall(
      "permitEIP2612AndExecuteEIP712",
      "permitEIP2612AndExecuteEIP712((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes32,bytes,(address,address,uint256,uint256,uint256,bool,uint8,bytes32,bytes32)):(bool,bytes)",
      [
        ethereum.Value.fromTuple(req),
        ethereum.Value.fromFixedBytes(domainSeparator),
        ethereum.Value.fromBytes(sig),
        ethereum.Value.fromTuple(permitOptions)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC20Forwader__permitEIP2612AndExecuteEIP712Result(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  permitEIP2612AndExecuteEIP712WithGasTokens(
    req: ERC20Forwader__permitEIP2612AndExecuteEIP712WithGasTokensInputReqStruct,
    domainSeparator: Bytes,
    sig: Bytes,
    permitOptions: ERC20Forwader__permitEIP2612AndExecuteEIP712WithGasTokensInputPermitOptionsStruct,
    gasTokensBurned: BigInt
  ): ERC20Forwader__permitEIP2612AndExecuteEIP712WithGasTokensResult {
    let result = super.call(
      "permitEIP2612AndExecuteEIP712WithGasTokens",
      "permitEIP2612AndExecuteEIP712WithGasTokens((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes32,bytes,(address,address,uint256,uint256,uint256,bool,uint8,bytes32,bytes32),uint256):(bool,bytes)",
      [
        ethereum.Value.fromTuple(req),
        ethereum.Value.fromFixedBytes(domainSeparator),
        ethereum.Value.fromBytes(sig),
        ethereum.Value.fromTuple(permitOptions),
        ethereum.Value.fromUnsignedBigInt(gasTokensBurned)
      ]
    );

    return new ERC20Forwader__permitEIP2612AndExecuteEIP712WithGasTokensResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_permitEIP2612AndExecuteEIP712WithGasTokens(
    req: ERC20Forwader__permitEIP2612AndExecuteEIP712WithGasTokensInputReqStruct,
    domainSeparator: Bytes,
    sig: Bytes,
    permitOptions: ERC20Forwader__permitEIP2612AndExecuteEIP712WithGasTokensInputPermitOptionsStruct,
    gasTokensBurned: BigInt
  ): ethereum.CallResult<
    ERC20Forwader__permitEIP2612AndExecuteEIP712WithGasTokensResult
  > {
    let result = super.tryCall(
      "permitEIP2612AndExecuteEIP712WithGasTokens",
      "permitEIP2612AndExecuteEIP712WithGasTokens((address,address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes32,bytes,(address,address,uint256,uint256,uint256,bool,uint8,bytes32,bytes32),uint256):(bool,bytes)",
      [
        ethereum.Value.fromTuple(req),
        ethereum.Value.fromFixedBytes(domainSeparator),
        ethereum.Value.fromBytes(sig),
        ethereum.Value.fromTuple(permitOptions),
        ethereum.Value.fromUnsignedBigInt(gasTokensBurned)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC20Forwader__permitEIP2612AndExecuteEIP712WithGasTokensResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  safeTransferRequired(param0: Address): boolean {
    let result = super.call(
      "safeTransferRequired",
      "safeTransferRequired(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_safeTransferRequired(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "safeTransferRequired",
      "safeTransferRequired(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferHandlerGas(param0: Address): BigInt {
    let result = super.call(
      "transferHandlerGas",
      "transferHandlerGas(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_transferHandlerGas(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferHandlerGas",
      "transferHandlerGas(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ExecuteEIP712Call extends ethereum.Call {
  get inputs(): ExecuteEIP712Call__Inputs {
    return new ExecuteEIP712Call__Inputs(this);
  }

  get outputs(): ExecuteEIP712Call__Outputs {
    return new ExecuteEIP712Call__Outputs(this);
  }
}

export class ExecuteEIP712Call__Inputs {
  _call: ExecuteEIP712Call;

  constructor(call: ExecuteEIP712Call) {
    this._call = call;
  }

  get req(): ExecuteEIP712CallReqStruct {
    return this._call.inputValues[0].value.toTuple() as ExecuteEIP712CallReqStruct;
  }

  get domainSeparator(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sig(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ExecuteEIP712Call__Outputs {
  _call: ExecuteEIP712Call;

  constructor(call: ExecuteEIP712Call) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get ret(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class ExecuteEIP712CallReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class ExecuteEIP712WithGasTokensCall extends ethereum.Call {
  get inputs(): ExecuteEIP712WithGasTokensCall__Inputs {
    return new ExecuteEIP712WithGasTokensCall__Inputs(this);
  }

  get outputs(): ExecuteEIP712WithGasTokensCall__Outputs {
    return new ExecuteEIP712WithGasTokensCall__Outputs(this);
  }
}

export class ExecuteEIP712WithGasTokensCall__Inputs {
  _call: ExecuteEIP712WithGasTokensCall;

  constructor(call: ExecuteEIP712WithGasTokensCall) {
    this._call = call;
  }

  get req(): ExecuteEIP712WithGasTokensCallReqStruct {
    return this._call.inputValues[0].value.toTuple() as ExecuteEIP712WithGasTokensCallReqStruct;
  }

  get domainSeparator(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sig(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get gasTokensBurned(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ExecuteEIP712WithGasTokensCall__Outputs {
  _call: ExecuteEIP712WithGasTokensCall;

  constructor(call: ExecuteEIP712WithGasTokensCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get ret(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class ExecuteEIP712WithGasTokensCallReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class ExecutePersonalSignCall extends ethereum.Call {
  get inputs(): ExecutePersonalSignCall__Inputs {
    return new ExecutePersonalSignCall__Inputs(this);
  }

  get outputs(): ExecutePersonalSignCall__Outputs {
    return new ExecutePersonalSignCall__Outputs(this);
  }
}

export class ExecutePersonalSignCall__Inputs {
  _call: ExecutePersonalSignCall;

  constructor(call: ExecutePersonalSignCall) {
    this._call = call;
  }

  get req(): ExecutePersonalSignCallReqStruct {
    return this._call.inputValues[0].value.toTuple() as ExecutePersonalSignCallReqStruct;
  }

  get sig(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ExecutePersonalSignCall__Outputs {
  _call: ExecutePersonalSignCall;

  constructor(call: ExecutePersonalSignCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get ret(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class ExecutePersonalSignCallReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class ExecutePersonalSignWithGasTokensCall extends ethereum.Call {
  get inputs(): ExecutePersonalSignWithGasTokensCall__Inputs {
    return new ExecutePersonalSignWithGasTokensCall__Inputs(this);
  }

  get outputs(): ExecutePersonalSignWithGasTokensCall__Outputs {
    return new ExecutePersonalSignWithGasTokensCall__Outputs(this);
  }
}

export class ExecutePersonalSignWithGasTokensCall__Inputs {
  _call: ExecutePersonalSignWithGasTokensCall;

  constructor(call: ExecutePersonalSignWithGasTokensCall) {
    this._call = call;
  }

  get req(): ExecutePersonalSignWithGasTokensCallReqStruct {
    return this._call.inputValues[0].value.toTuple() as ExecutePersonalSignWithGasTokensCallReqStruct;
  }

  get sig(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get gasTokensBurned(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExecutePersonalSignWithGasTokensCall__Outputs {
  _call: ExecutePersonalSignWithGasTokensCall;

  constructor(call: ExecutePersonalSignWithGasTokensCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get ret(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class ExecutePersonalSignWithGasTokensCallReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _feeReceiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _forwarder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PermitAndExecuteEIP712Call extends ethereum.Call {
  get inputs(): PermitAndExecuteEIP712Call__Inputs {
    return new PermitAndExecuteEIP712Call__Inputs(this);
  }

  get outputs(): PermitAndExecuteEIP712Call__Outputs {
    return new PermitAndExecuteEIP712Call__Outputs(this);
  }
}

export class PermitAndExecuteEIP712Call__Inputs {
  _call: PermitAndExecuteEIP712Call;

  constructor(call: PermitAndExecuteEIP712Call) {
    this._call = call;
  }

  get req(): PermitAndExecuteEIP712CallReqStruct {
    return this._call.inputValues[0].value.toTuple() as PermitAndExecuteEIP712CallReqStruct;
  }

  get domainSeparator(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sig(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get permitOptions(): PermitAndExecuteEIP712CallPermitOptionsStruct {
    return this._call.inputValues[3].value.toTuple() as PermitAndExecuteEIP712CallPermitOptionsStruct;
  }
}

export class PermitAndExecuteEIP712Call__Outputs {
  _call: PermitAndExecuteEIP712Call;

  constructor(call: PermitAndExecuteEIP712Call) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get ret(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class PermitAndExecuteEIP712CallReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class PermitAndExecuteEIP712CallPermitOptionsStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get spender(): Address {
    return this[1].toAddress();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get expiry(): BigInt {
    return this[4].toBigInt();
  }

  get allowed(): boolean {
    return this[5].toBoolean();
  }

  get v(): i32 {
    return this[6].toI32();
  }

  get r(): Bytes {
    return this[7].toBytes();
  }

  get s(): Bytes {
    return this[8].toBytes();
  }
}

export class PermitAndExecuteEIP712WithGasTokensCall extends ethereum.Call {
  get inputs(): PermitAndExecuteEIP712WithGasTokensCall__Inputs {
    return new PermitAndExecuteEIP712WithGasTokensCall__Inputs(this);
  }

  get outputs(): PermitAndExecuteEIP712WithGasTokensCall__Outputs {
    return new PermitAndExecuteEIP712WithGasTokensCall__Outputs(this);
  }
}

export class PermitAndExecuteEIP712WithGasTokensCall__Inputs {
  _call: PermitAndExecuteEIP712WithGasTokensCall;

  constructor(call: PermitAndExecuteEIP712WithGasTokensCall) {
    this._call = call;
  }

  get req(): PermitAndExecuteEIP712WithGasTokensCallReqStruct {
    return this._call.inputValues[0].value.toTuple() as PermitAndExecuteEIP712WithGasTokensCallReqStruct;
  }

  get domainSeparator(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sig(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get permitOptions(): PermitAndExecuteEIP712WithGasTokensCallPermitOptionsStruct {
    return this._call.inputValues[3].value.toTuple() as PermitAndExecuteEIP712WithGasTokensCallPermitOptionsStruct;
  }

  get gasTokensBurned(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class PermitAndExecuteEIP712WithGasTokensCall__Outputs {
  _call: PermitAndExecuteEIP712WithGasTokensCall;

  constructor(call: PermitAndExecuteEIP712WithGasTokensCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get ret(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class PermitAndExecuteEIP712WithGasTokensCallReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class PermitAndExecuteEIP712WithGasTokensCallPermitOptionsStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get spender(): Address {
    return this[1].toAddress();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get expiry(): BigInt {
    return this[4].toBigInt();
  }

  get allowed(): boolean {
    return this[5].toBoolean();
  }

  get v(): i32 {
    return this[6].toI32();
  }

  get r(): Bytes {
    return this[7].toBytes();
  }

  get s(): Bytes {
    return this[8].toBytes();
  }
}

export class PermitEIP2612AndExecuteEIP712Call extends ethereum.Call {
  get inputs(): PermitEIP2612AndExecuteEIP712Call__Inputs {
    return new PermitEIP2612AndExecuteEIP712Call__Inputs(this);
  }

  get outputs(): PermitEIP2612AndExecuteEIP712Call__Outputs {
    return new PermitEIP2612AndExecuteEIP712Call__Outputs(this);
  }
}

export class PermitEIP2612AndExecuteEIP712Call__Inputs {
  _call: PermitEIP2612AndExecuteEIP712Call;

  constructor(call: PermitEIP2612AndExecuteEIP712Call) {
    this._call = call;
  }

  get req(): PermitEIP2612AndExecuteEIP712CallReqStruct {
    return this._call.inputValues[0].value.toTuple() as PermitEIP2612AndExecuteEIP712CallReqStruct;
  }

  get domainSeparator(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sig(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get permitOptions(): PermitEIP2612AndExecuteEIP712CallPermitOptionsStruct {
    return this._call.inputValues[3].value.toTuple() as PermitEIP2612AndExecuteEIP712CallPermitOptionsStruct;
  }
}

export class PermitEIP2612AndExecuteEIP712Call__Outputs {
  _call: PermitEIP2612AndExecuteEIP712Call;

  constructor(call: PermitEIP2612AndExecuteEIP712Call) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get ret(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class PermitEIP2612AndExecuteEIP712CallReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class PermitEIP2612AndExecuteEIP712CallPermitOptionsStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get spender(): Address {
    return this[1].toAddress();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get expiry(): BigInt {
    return this[4].toBigInt();
  }

  get allowed(): boolean {
    return this[5].toBoolean();
  }

  get v(): i32 {
    return this[6].toI32();
  }

  get r(): Bytes {
    return this[7].toBytes();
  }

  get s(): Bytes {
    return this[8].toBytes();
  }
}

export class PermitEIP2612AndExecuteEIP712WithGasTokensCall extends ethereum.Call {
  get inputs(): PermitEIP2612AndExecuteEIP712WithGasTokensCall__Inputs {
    return new PermitEIP2612AndExecuteEIP712WithGasTokensCall__Inputs(this);
  }

  get outputs(): PermitEIP2612AndExecuteEIP712WithGasTokensCall__Outputs {
    return new PermitEIP2612AndExecuteEIP712WithGasTokensCall__Outputs(this);
  }
}

export class PermitEIP2612AndExecuteEIP712WithGasTokensCall__Inputs {
  _call: PermitEIP2612AndExecuteEIP712WithGasTokensCall;

  constructor(call: PermitEIP2612AndExecuteEIP712WithGasTokensCall) {
    this._call = call;
  }

  get req(): PermitEIP2612AndExecuteEIP712WithGasTokensCallReqStruct {
    return this._call.inputValues[0].value.toTuple() as PermitEIP2612AndExecuteEIP712WithGasTokensCallReqStruct;
  }

  get domainSeparator(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sig(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get permitOptions(): PermitEIP2612AndExecuteEIP712WithGasTokensCallPermitOptionsStruct {
    return this._call.inputValues[3].value.toTuple() as PermitEIP2612AndExecuteEIP712WithGasTokensCallPermitOptionsStruct;
  }

  get gasTokensBurned(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class PermitEIP2612AndExecuteEIP712WithGasTokensCall__Outputs {
  _call: PermitEIP2612AndExecuteEIP712WithGasTokensCall;

  constructor(call: PermitEIP2612AndExecuteEIP712WithGasTokensCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get ret(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class PermitEIP2612AndExecuteEIP712WithGasTokensCallReqStruct extends ethereum.Tuple {
  get from(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get txGas(): BigInt {
    return this[3].toBigInt();
  }

  get tokenGasPrice(): BigInt {
    return this[4].toBigInt();
  }

  get batchId(): BigInt {
    return this[5].toBigInt();
  }

  get batchNonce(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class PermitEIP2612AndExecuteEIP712WithGasTokensCallPermitOptionsStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get spender(): Address {
    return this[1].toAddress();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get expiry(): BigInt {
    return this[4].toBigInt();
  }

  get allowed(): boolean {
    return this[5].toBoolean();
  }

  get v(): i32 {
    return this[6].toI32();
  }

  get r(): Bytes {
    return this[7].toBytes();
  }

  get s(): Bytes {
    return this[8].toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBaseGasCall extends ethereum.Call {
  get inputs(): SetBaseGasCall__Inputs {
    return new SetBaseGasCall__Inputs(this);
  }

  get outputs(): SetBaseGasCall__Outputs {
    return new SetBaseGasCall__Outputs(this);
  }
}

export class SetBaseGasCall__Inputs {
  _call: SetBaseGasCall;

  constructor(call: SetBaseGasCall) {
    this._call = call;
  }

  get gas(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBaseGasCall__Outputs {
  _call: SetBaseGasCall;

  constructor(call: SetBaseGasCall) {
    this._call = call;
  }
}

export class SetFeeManagerCall extends ethereum.Call {
  get inputs(): SetFeeManagerCall__Inputs {
    return new SetFeeManagerCall__Inputs(this);
  }

  get outputs(): SetFeeManagerCall__Outputs {
    return new SetFeeManagerCall__Outputs(this);
  }
}

export class SetFeeManagerCall__Inputs {
  _call: SetFeeManagerCall;

  constructor(call: SetFeeManagerCall) {
    this._call = call;
  }

  get _feeManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeManagerCall__Outputs {
  _call: SetFeeManagerCall;

  constructor(call: SetFeeManagerCall) {
    this._call = call;
  }
}

export class SetFeeReceiverCall extends ethereum.Call {
  get inputs(): SetFeeReceiverCall__Inputs {
    return new SetFeeReceiverCall__Inputs(this);
  }

  get outputs(): SetFeeReceiverCall__Outputs {
    return new SetFeeReceiverCall__Outputs(this);
  }
}

export class SetFeeReceiverCall__Inputs {
  _call: SetFeeReceiverCall;

  constructor(call: SetFeeReceiverCall) {
    this._call = call;
  }

  get _feeReceiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeReceiverCall__Outputs {
  _call: SetFeeReceiverCall;

  constructor(call: SetFeeReceiverCall) {
    this._call = call;
  }
}

export class SetGasRefundCall extends ethereum.Call {
  get inputs(): SetGasRefundCall__Inputs {
    return new SetGasRefundCall__Inputs(this);
  }

  get outputs(): SetGasRefundCall__Outputs {
    return new SetGasRefundCall__Outputs(this);
  }
}

export class SetGasRefundCall__Inputs {
  _call: SetGasRefundCall;

  constructor(call: SetGasRefundCall) {
    this._call = call;
  }

  get refund(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGasRefundCall__Outputs {
  _call: SetGasRefundCall;

  constructor(call: SetGasRefundCall) {
    this._call = call;
  }
}

export class SetGasTokenForwarderBaseGasCall extends ethereum.Call {
  get inputs(): SetGasTokenForwarderBaseGasCall__Inputs {
    return new SetGasTokenForwarderBaseGasCall__Inputs(this);
  }

  get outputs(): SetGasTokenForwarderBaseGasCall__Outputs {
    return new SetGasTokenForwarderBaseGasCall__Outputs(this);
  }
}

export class SetGasTokenForwarderBaseGasCall__Inputs {
  _call: SetGasTokenForwarderBaseGasCall;

  constructor(call: SetGasTokenForwarderBaseGasCall) {
    this._call = call;
  }

  get gas(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGasTokenForwarderBaseGasCall__Outputs {
  _call: SetGasTokenForwarderBaseGasCall;

  constructor(call: SetGasTokenForwarderBaseGasCall) {
    this._call = call;
  }
}

export class SetOracleAggregatorCall extends ethereum.Call {
  get inputs(): SetOracleAggregatorCall__Inputs {
    return new SetOracleAggregatorCall__Inputs(this);
  }

  get outputs(): SetOracleAggregatorCall__Outputs {
    return new SetOracleAggregatorCall__Outputs(this);
  }
}

export class SetOracleAggregatorCall__Inputs {
  _call: SetOracleAggregatorCall;

  constructor(call: SetOracleAggregatorCall) {
    this._call = call;
  }

  get oa(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleAggregatorCall__Outputs {
  _call: SetOracleAggregatorCall;

  constructor(call: SetOracleAggregatorCall) {
    this._call = call;
  }
}

export class SetSafeTransferRequiredCall extends ethereum.Call {
  get inputs(): SetSafeTransferRequiredCall__Inputs {
    return new SetSafeTransferRequiredCall__Inputs(this);
  }

  get outputs(): SetSafeTransferRequiredCall__Outputs {
    return new SetSafeTransferRequiredCall__Outputs(this);
  }
}

export class SetSafeTransferRequiredCall__Inputs {
  _call: SetSafeTransferRequiredCall;

  constructor(call: SetSafeTransferRequiredCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _safeTransferRequired(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetSafeTransferRequiredCall__Outputs {
  _call: SetSafeTransferRequiredCall;

  constructor(call: SetSafeTransferRequiredCall) {
    this._call = call;
  }
}

export class SetTransferHandlerGasCall extends ethereum.Call {
  get inputs(): SetTransferHandlerGasCall__Inputs {
    return new SetTransferHandlerGasCall__Inputs(this);
  }

  get outputs(): SetTransferHandlerGasCall__Outputs {
    return new SetTransferHandlerGasCall__Outputs(this);
  }
}

export class SetTransferHandlerGasCall__Inputs {
  _call: SetTransferHandlerGasCall;

  constructor(call: SetTransferHandlerGasCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _transferHandlerGas(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTransferHandlerGasCall__Outputs {
  _call: SetTransferHandlerGasCall;

  constructor(call: SetTransferHandlerGasCall) {
    this._call = call;
  }
}

export class SetTrustedForwarderCall extends ethereum.Call {
  get inputs(): SetTrustedForwarderCall__Inputs {
    return new SetTrustedForwarderCall__Inputs(this);
  }

  get outputs(): SetTrustedForwarderCall__Outputs {
    return new SetTrustedForwarderCall__Outputs(this);
  }
}

export class SetTrustedForwarderCall__Inputs {
  _call: SetTrustedForwarderCall;

  constructor(call: SetTrustedForwarderCall) {
    this._call = call;
  }

  get _forwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTrustedForwarderCall__Outputs {
  _call: SetTrustedForwarderCall;

  constructor(call: SetTrustedForwarderCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
